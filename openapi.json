{
  "openapi": "3.0.4",
  "info": {
    "title": "leadping.Api",
    "description": "leadping API",
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    },
    "version": "v1"
  },
  "servers": [
    {
      "url": "https://api.leadping.ai",
      "description": "Production"
    }
  ],
  "paths": {
    "/automations": {
      "post": {
        "tags": [
          "Automations"
        ],
        "summary": "Creates a new automation for automated SMS sending.",
        "operationId": "Automations_Create_request",
        "requestBody": {
          "description": "The automation details to create.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AutomationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Automation was successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AutomationResponse"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid or malformed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/automations/{id}": {
      "put": {
        "tags": [
          "Automations"
        ],
        "summary": "Updates an existing automation.",
        "operationId": "Automations_Update_id_request",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the automation to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The updated automation details.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AutomationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Automation was successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AutomationResponse"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid or malformed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "The specified automation was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Automations"
        ],
        "summary": "Retrieves an automation by ID.",
        "operationId": "Automations_Get_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the automation to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Automation was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AutomationResponse"
                }
              }
            }
          },
          "404": {
            "description": "The specified automation was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Automations"
        ],
        "summary": "Deletes an automation.",
        "operationId": "Automations_Delete_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the automation to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Automation was successfully deleted."
          },
          "404": {
            "description": "The specified automation was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/businesses/{id}": {
      "put": {
        "tags": [
          "Businesses"
        ],
        "summary": "Updates an existing business.",
        "operationId": "Businesses_Update_id_request",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the business to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The updated business data.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BusinessRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Business was successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessResponse"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid or malformed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "The specified business was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Businesses"
        ],
        "summary": "Retrieves a business by its ID.",
        "operationId": "Businesses_Get_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the business to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Business was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessResponse"
                }
              }
            }
          },
          "404": {
            "description": "The specified business was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/businesses/me": {
      "get": {
        "tags": [
          "Businesses"
        ],
        "summary": "Retrieves a business for the current user.",
        "operationId": "Businesses_GetForCurrentUser_NoParams",
        "responses": {
          "200": {
            "description": "Business was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessResponse"
                }
              }
            }
          },
          "404": {
            "description": "The specified business was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/dispositions": {
      "post": {
        "tags": [
          "Dispositions"
        ],
        "summary": "Creates a new disposition.",
        "operationId": "Dispositions_Create_request",
        "requestBody": {
          "description": "The disposition data to create.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DispositionRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Disposition was successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DispositionResponse"
                }
              }
            }
          },
          "404": {
            "description": "A related resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid or malformed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/dispositions/{id}": {
      "get": {
        "tags": [
          "Dispositions"
        ],
        "summary": "Retrieves a disposition by its ID.",
        "operationId": "Dispositions_Get_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the disposition to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Disposition was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DispositionResponse"
                }
              }
            }
          },
          "404": {
            "description": "The specified disposition was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Dispositions"
        ],
        "summary": "Deletes a disposition.",
        "operationId": "Dispositions_Delete_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the disposition to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Disposition was successfully deleted."
          },
          "404": {
            "description": "The specified disposition was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/dispositions/lead/{leadId}": {
      "get": {
        "tags": [
          "Dispositions"
        ],
        "summary": "Retrieves all dispositions for a specific lead.",
        "operationId": "Dispositions_GetByLeadId_leadId",
        "parameters": [
          {
            "name": "leadId",
            "in": "path",
            "description": "The ID of the lead to get dispositions for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Dispositions were successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DispositionResponse"
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified lead was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/leads": {
      "post": {
        "tags": [
          "Leads"
        ],
        "summary": "Creates a lead.",
        "operationId": "Leads_CreateExternal_request",
        "requestBody": {
          "description": "The lead data submitted by the external system.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LeadRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Lead was successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeadResponse"
                }
              }
            }
          },
          "404": {
            "description": "A related resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid or malformed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Leads"
        ],
        "summary": "Updates an existing lead.",
        "operationId": "Leads_Update_id_request",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the lead to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The updated lead data.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LeadRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Lead was successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeadResponse"
                }
              }
            }
          },
          "404": {
            "description": "The specified lead was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid or malformed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/payment-methods/{id}": {
      "get": {
        "tags": [
          "PaymentMethods"
        ],
        "summary": "Retrieves a payment method by its ID.",
        "operationId": "PaymentMethods_Get_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the payment method to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Payment method was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StripePaymentMethodResponse"
                }
              }
            }
          },
          "404": {
            "description": "The specified payment method was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid or malformed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "PaymentMethods"
        ],
        "summary": "Deletes a payment method from the user.",
        "operationId": "PaymentMethods_Delete_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the payment method to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Payment method was successfully deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "The specified payment method was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid or malformed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/sources": {
      "post": {
        "tags": [
          "Sources"
        ],
        "summary": "Creates a new source.",
        "operationId": "Sources_Create_request",
        "requestBody": {
          "description": "The source data to create.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SourceRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Source was successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourceResponse"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid or malformed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Sources"
        ],
        "summary": "Retrieves all sources based on the provided query options.",
        "operationId": "Sources_Get_Skip_Take_OrderBy_IncludeCount",
        "parameters": [
          {
            "name": "Skip",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Take",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "OrderBy",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "IncludeCount",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Sources were successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SourceResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/sources/{id}": {
      "put": {
        "tags": [
          "Sources"
        ],
        "summary": "Updates an existing source.",
        "operationId": "Sources_Update_id_request",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the source to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The updated source data.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SourceRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Source was successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourceResponse"
                }
              }
            }
          },
          "404": {
            "description": "The specified source was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Sources"
        ],
        "summary": "Retrieves a source by its ID.",
        "operationId": "Sources_GetById_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the source to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Source was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourceResponse"
                }
              }
            }
          },
          "404": {
            "description": "The specified source was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Sources"
        ],
        "summary": "Deletes a source.",
        "operationId": "Sources_Delete_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the source to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Source was successfully deleted."
          },
          "404": {
            "description": "The specified source was not found.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/users/{id}": {
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Updates a user",
        "operationId": "Users_Update_id_request",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/users/{id}/paymentmethod": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Retrieves a payment method for a user",
        "operationId": "Users_GetPaymentMethod_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StripePaymentMethodResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/users/me": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Retrieves the current user's information",
        "operationId": "Users_GetForCurrentUser_NoParams",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AutomationRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the automation.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "The description of the automation.",
            "nullable": true
          },
          "schedule": {
            "type": "string",
            "description": "The schedule for the automation in cron format.",
            "nullable": true
          },
          "fromPhoneNumber": {
            "type": "string",
            "description": "The phone number to send the SMS from.",
            "nullable": true
          },
          "toPhoneNumber": {
            "type": "string",
            "description": "The phone number to send the SMS to.",
            "nullable": true
          },
          "message": {
            "type": "string",
            "description": "The message content to send.",
            "nullable": true
          },
          "isActive": {
            "type": "boolean",
            "description": "Whether the automation is active."
          }
        },
        "additionalProperties": false,
        "description": "Request DTO for creating or updating an SMS automation."
      },
      "AutomationResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of the automation.",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "The name of the automation.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "The description of the automation.",
            "nullable": true
          },
          "schedule": {
            "type": "string",
            "description": "The schedule for the automation in cron format.",
            "nullable": true
          },
          "fromPhoneNumber": {
            "type": "string",
            "description": "The phone number to send the SMS from.",
            "nullable": true
          },
          "toPhoneNumber": {
            "type": "string",
            "description": "The phone number to send the SMS to.",
            "nullable": true
          },
          "message": {
            "type": "string",
            "description": "The message content to send.",
            "nullable": true
          },
          "isActive": {
            "type": "boolean",
            "description": "Whether the automation is active."
          },
          "createdAt": {
            "type": "string",
            "description": "When the automation was created.",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "description": "When the automation was last updated.",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "description": "Response DTO for SMS automation data."
      },
      "BusinessRequest": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string"
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "address": {
            "$ref": "#/components/schemas/StreetAddress"
          },
          "website": {
            "type": "string",
            "nullable": true
          },
          "vertical": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "ein": {
            "type": "string",
            "nullable": true
          },
          "isOlderThan90": {
            "type": "boolean",
            "nullable": true
          },
          "einDocumentUrl": {
            "type": "string",
            "nullable": true
          },
          "phones": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdNameValue"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BusinessResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "modifiedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "address": {
            "$ref": "#/components/schemas/StreetAddress"
          },
          "vertical": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "ein": {
            "type": "string",
            "nullable": true
          },
          "isOlderThan90": {
            "type": "boolean",
            "nullable": true
          },
          "einDocumentUrl": {
            "type": "string",
            "nullable": true
          },
          "phones": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdNameValue"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DispositionRequest": {
        "type": "object",
        "properties": {
          "leadId": {
            "type": "string",
            "description": "The ID of the lead this disposition is associated with.",
            "nullable": true
          },
          "type": {
            "type": "string",
            "description": "The type of disposition (e.g., \"Call\", \"Text\").",
            "nullable": true
          },
          "outcome": {
            "type": "string",
            "description": "The outcome or result of the disposition.",
            "nullable": true
          },
          "notes": {
            "type": "string",
            "description": "Additional notes or comments about the disposition.",
            "nullable": true
          },
          "timestamp": {
            "type": "string",
            "description": "The timestamp when the disposition occurred.",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "description": "Request model for creating or updating a disposition."
      },
      "DispositionResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of the disposition.",
            "nullable": true
          },
          "leadId": {
            "type": "string",
            "description": "The ID of the lead this disposition is associated with.",
            "nullable": true
          },
          "type": {
            "type": "string",
            "description": "The type of disposition (e.g., \"Call\", \"Text\").",
            "nullable": true
          },
          "outcome": {
            "type": "string",
            "description": "The outcome or result of the disposition.",
            "nullable": true
          },
          "notes": {
            "type": "string",
            "description": "Additional notes or comments about the disposition.",
            "nullable": true
          },
          "timestamp": {
            "type": "string",
            "description": "The timestamp when the disposition occurred.",
            "format": "date-time"
          },
          "createdAt": {
            "type": "string",
            "description": "The timestamp when the disposition was created.",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "description": "The timestamp when the disposition was last updated.",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "description": "Response model for disposition data."
      },
      "EmploymentType": {
        "enum": [
          "Employed",
          "PartTime",
          "SelfEmployed",
          "Contractor",
          "Unemployed",
          "Retired",
          "Student",
          "Military",
          "Homemaker",
          "Disabled",
          "Other"
        ],
        "type": "string",
        "additionalProperties": false
      },
      "GenderType": {
        "enum": [
          "M",
          "F",
          "NonBinary",
          "PreferNotToSay",
          "Other"
        ],
        "type": "string",
        "additionalProperties": false,
        "description": "Represents a gender classification used for demographic or identification purposes."
      },
      "IdNamePair": {
        "required": [
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "minLength": 1,
            "type": "string"
          },
          "name": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "IdNameValue": {
        "required": [
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "minLength": 1,
            "type": "string"
          },
          "name": {
            "minLength": 1,
            "type": "string"
          },
          "value": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LeadContact": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "description": "Gets or sets the first name of the lead.",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "description": "Gets or sets the last name (surname) of the lead.",
            "nullable": true
          },
          "streetAddress": {
            "$ref": "#/components/schemas/StreetAddress"
          },
          "phone": {
            "$ref": "#/components/schemas/Phone"
          },
          "email": {
            "type": "string",
            "description": "Gets or sets the email address of the lead.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents the primary contact details for a lead, including name, address, phone, and email."
      },
      "LeadMetadata": {
        "required": [
          "trustedFormUri"
        ],
        "type": "object",
        "properties": {
          "utmSource": {
            "type": "string",
            "description": "The source of the lead traffic (e.g., \"google\", \"facebook\").",
            "nullable": true
          },
          "utmMedium": {
            "type": "string",
            "description": "The medium used to acquire the lead (e.g., \"cpc\", \"email\").",
            "nullable": true
          },
          "utmCampaign": {
            "type": "string",
            "description": "The UTM campaign name used for marketing attribution (e.g., \"fall-promo\").",
            "nullable": true
          },
          "referrer": {
            "type": "string",
            "description": "The full referring URL or page that originated the lead.",
            "nullable": true
          },
          "landingPage": {
            "type": "string",
            "description": "The landing page or form endpoint used to submit the lead.",
            "nullable": true
          },
          "subId": {
            "type": "string",
            "description": "A sub-source identifier, often representing a placement or internal variant. May be truncated or character-normalized.",
            "nullable": true
          },
          "pubId": {
            "type": "string",
            "description": "A publisher ID representing the partner or platform that supplied the lead.",
            "nullable": true
          },
          "ipAddress": {
            "type": "string",
            "description": "The IP address of the user who submitted the lead.",
            "nullable": true
          },
          "userAgent": {
            "type": "string",
            "description": "The user agent string from the browser or device used during lead submission.",
            "nullable": true
          },
          "externalId": {
            "type": "string",
            "description": "Identifier of the lead in an external or third-party system.",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "description": "The UTC timestamp when the lead was generated.",
            "format": "date-time"
          },
          "price": {
            "type": "number",
            "description": "The monetary value or payout assigned to this lead.",
            "format": "double",
            "nullable": true
          },
          "trustedFormUri": {
            "minLength": 1,
            "type": "string",
            "description": "A required URI pointing to the TrustedForm or similar consent certificate."
          }
        },
        "additionalProperties": false,
        "description": "Metadata related to the origin, context, and attribution of a submitted lead."
      },
      "LeadProfile": {
        "type": "object",
        "properties": {
          "gender": {
            "$ref": "#/components/schemas/GenderType"
          },
          "height": {
            "type": "integer",
            "description": "The lead prospect's height in inches",
            "format": "int32",
            "nullable": true
          },
          "weight": {
            "type": "integer",
            "description": "The lead prospect's weight in pounds",
            "format": "int32",
            "nullable": true
          },
          "birthDate": {
            "type": "string",
            "description": "The lead prospect's birth date",
            "format": "date",
            "nullable": true
          },
          "maritalStatus": {
            "$ref": "#/components/schemas/MaritalStatusType"
          },
          "income": {
            "type": "integer",
            "description": "The lead prospect's income in dollars",
            "format": "int32",
            "nullable": true
          },
          "isHomeowner": {
            "type": "boolean",
            "description": "true if the lead prospect is a homeowner",
            "nullable": true
          },
          "monthsAtResidence": {
            "type": "integer",
            "description": "How many months has the lead prospect lived at their current residence?",
            "format": "int32",
            "nullable": true
          },
          "creditScore": {
            "type": "integer",
            "description": "The lead prospect's credit rating",
            "format": "int32",
            "nullable": true
          },
          "hasBankruptcy": {
            "type": "boolean",
            "description": "true if the lead prospect experienced bankruptcy in the last 7 years",
            "nullable": true
          },
          "employmentType": {
            "$ref": "#/components/schemas/EmploymentType"
          },
          "numberOfDependents": {
            "type": "integer",
            "description": "The lead prospect's number of dependents",
            "format": "int32",
            "nullable": true
          },
          "hasMedicalCondition": {
            "type": "boolean",
            "description": "true if the lead has any pre-existing medical conditions",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LeadRequest": {
        "required": [
          "metadata"
        ],
        "type": "object",
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/LeadMetadata"
          },
          "contact": {
            "$ref": "#/components/schemas/LeadContact"
          },
          "customer": {
            "$ref": "#/components/schemas/LeadProfile"
          }
        },
        "additionalProperties": false
      },
      "LeadResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier for the lead record.",
            "nullable": true
          },
          "message": {
            "type": "string",
            "description": "An optional message returned with the lead, such as confirmation or status details.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents the result of a lead submission."
      },
      "MaritalStatusType": {
        "enum": [
          "Married",
          "Single",
          "Widow",
          "Separated",
          "Divorced"
        ],
        "type": "string",
        "additionalProperties": false
      },
      "Phone": {
        "type": "object",
        "properties": {
          "number": {
            "type": "string",
            "description": "The lead's phone number in required format: +1 followed by 10 digits (e.g. +11234567890)",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/PhoneType"
          }
        },
        "additionalProperties": false
      },
      "PhoneType": {
        "enum": [
          "Mobile",
          "Landline",
          "Voip",
          "TollFree",
          "ShortCode",
          "PremiumRate",
          "Temporary",
          "Other"
        ],
        "type": "string",
        "additionalProperties": false,
        "description": "Represents the classification of a phone number for compliance, routing, or message deliverability purposes."
      },
      "ProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": { }
      },
      "SourceRequest": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "enabled": {
            "type": "boolean"
          },
          "apiKey": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SourceResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "modifiedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "enabled": {
            "type": "boolean"
          },
          "apiKey": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "StreetAddress": {
        "type": "object",
        "properties": {
          "line1": {
            "type": "string",
            "nullable": true
          },
          "line2": {
            "type": "string",
            "nullable": true
          },
          "city": {
            "type": "string",
            "nullable": true
          },
          "state": {
            "type": "string",
            "nullable": true
          },
          "province": {
            "type": "string",
            "nullable": true
          },
          "region": {
            "type": "string",
            "nullable": true
          },
          "postalCode": {
            "type": "string",
            "nullable": true
          },
          "country": {
            "type": "string",
            "nullable": true
          },
          "additionalInfo": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "StripePaymentMethodResponse": {
        "required": [
          "brand",
          "id",
          "last4"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The Stripe PaymentMethod ID",
            "nullable": true
          },
          "brand": {
            "type": "string",
            "description": "The brand of the card (e.g., Visa, MasterCard)",
            "nullable": true
          },
          "last4": {
            "type": "string",
            "description": "The last 4 digits of the card number",
            "nullable": true
          },
          "expMonth": {
            "type": "integer",
            "description": "The expiration month of the card",
            "format": "int32"
          },
          "expYear": {
            "type": "integer",
            "description": "The expiration year of the card",
            "format": "int32"
          },
          "isDefault": {
            "type": "boolean",
            "description": "Whether this payment method is set as the default"
          },
          "createdAt": {
            "type": "string",
            "description": "When the payment method was created (optional, if available)",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a saved payment method (e.g., card) for user display"
      },
      "UserIdentity": {
        "type": "object",
        "properties": {
          "issuer": {
            "type": "string",
            "nullable": true
          },
          "issuerAssignedId": {
            "type": "string",
            "nullable": true
          },
          "signInType": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserRequest": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string"
          },
          "email": {
            "type": "string",
            "description": "This is not a perfect field; a user can have multiple emails...",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "billingPlan": {
            "type": "string",
            "nullable": true
          },
          "business": {
            "$ref": "#/components/schemas/BusinessRequest"
          }
        },
        "additionalProperties": false
      },
      "UserResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "modifiedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "billingPlan": {
            "type": "string",
            "nullable": true
          },
          "roles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserRoles"
            },
            "nullable": true
          },
          "identities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserIdentity"
            },
            "nullable": true
          },
          "stripeInfo": {
            "$ref": "#/components/schemas/UserStripeInfo"
          },
          "accountBalance": {
            "type": "number",
            "format": "double"
          },
          "business": {
            "$ref": "#/components/schemas/IdNamePair"
          }
        },
        "additionalProperties": false
      },
      "UserRoles": {
        "enum": [
          "Initialized",
          "Agent",
          "Admin",
          "SuperUser"
        ],
        "type": "string",
        "additionalProperties": false,
        "description": "A user can have multiple role types. <para />"
      },
      "UserStripeInfo": {
        "type": "object",
        "properties": {
          "customerId": {
            "type": "string",
            "nullable": true
          },
          "defaultPaymentMethodId": {
            "type": "string",
            "description": "Default payment method (usually card) attached to the customer, for billing later.",
            "nullable": true
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "apiKey",
        "description": "JWT Authorization header using the Bearer scheme. \r\n\r\n Enter 'Bearer' [space] and then your token in the text input below.\r\n\r\nExample: \"Bearer 1234abcdef\"",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "Bearer": [ ]
    }
  ]
}